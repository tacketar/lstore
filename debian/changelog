lstore (2.4.4) stable; urgency=low
  * Fix management scripts
  * Fix nested ACL construction issues
  * Add support to NOT return extended ACLs
  * Add support for using the LFS inode number via FUSE
  * Use the system.modify_data for the st_ctime instead of the modify_attr
  * Add option to update parent dir mtime when changes occur in the directory
  * Switch from using the FD to the fname depending on what's available
  * Fix truncate() edge case when growing the file stored as metadata
  * Handle uid/gid values of -1 for chown
  * Refactor osaz to support fetching/storing of ACLs in OS attrs
  * Add support to fetch ACLs from the OS based on the prefix
  * Add ability to limit attr caching using multiple wildcards with timeouts
  * Fix osf_store_val() bug if filling a user provided buffer
  * Add baseline support for native NFS4 ACLs.  DO NOT USE AT THIS TIME!!!!
  * Add a barebones FUSE driver for help with setting NFS4 ACL bootstrapping
  * Add helper to remove whitespace from a string

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Th Jul 10 2025 15:16 -0500

lstore (2.4.3) stable; urgency=low
  * Stop DNS query storm -- Sanitize setting the hostport and also remove the superflous DNS lookup
  * Update LServer warmer helper scripts and start the process of deprecating the python wrapper
  * Add more diagnostics and config checking

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Th May 15 2025 09:31 -0500

lstore (2.4.2) stable; urgency=low
  * Make install easier by making parent directories if they don't exist
  * Gracefully handle empy log directories

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Tu May 06 2025 15:32 -0600

  
lstore (2.4.1) stable; urgency=low
  * More diagnostics about why things won't start
  * Add lio_config shortcuts
  * Support for default users for each shortcut
  * Report when the RS can't open the RID config file
  * Fix bug not setting other RW perms on LFS files and also add more diagnostic info.
  * Enable resolving parameters when loading the config and also print the authn section when dumping state
  * Move lio_parse_path_check from the tests to lio/bin so it can be used as a helper
  * Add global lfs_mgmt script
  * Add support for a root prefix.
  * User configurable chown errno() setting

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Tu May 06 2025 08:22 -0600

lstore (2.4.0) stable; urgency=low
  * Add tooling to better understand path_acl mappings
  * Ease of use support for multiple LFS mounts
  * Extend INI parsing to support: using env variables, multiline support, add values with delims, ability to remove a section, and merge an external file
  * Add support for auotmatic fetching and usage of shortcut hints
  * Fix several isues related to loading and using  multiple LIO contexts at the same time
  * Add ability to change the error for the unsupported chown() call

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Tu Apr 01 2025 11:0:00 -0500

lstore (2.3.1) stable; urgency=high
  * Fix return type in lfs_copy_range() to support large transfers

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Fr Feb 28 2025 11:0:00 -0500

lstore (2.3.0) stable; urgency=low
  * Initial version with fully functioning LFS service manager scripts

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Th Feb 13 2025 15:36:00 -0500

lstore (2.2.6) stable; urgency=low
  * LFS service manager script now cleans up the systemd services
  
 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Th Jan 23 2024 13:34:00 -0500

lstore (2.2.5) stable; urgency=low
  * Add LFS service manager script
  
 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Th Jan 09 2024 14:03:00 -0500

lstore (2.2.4) stable; urgency=high (for lio_server only)
  * Fix bug with switching FD ilock from the stack to the heap
  
 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Fri Jan 03 2024 14:04:00 -0500

lstore (2.2.3) stable; urgency=high (for ibp_server, low for everything else)
  * Fix bug when iterating and not properly tracking the shelf.  This only effects ibp_server.
  * Update the threadpool to support TP level concurrencies and stats

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Thur Dec 05 2024 16:14:00 -0500

lstore (2.2.2) stable; urgency=high (for lio_server, low for everything else)
  * Fix issue with ongoing fail when ohandle is missing

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Thur Oct 03 2024 09:26:00 -0500


lstore (2.2.1) stable; urgency=medium   
  * In ibp_server don't assume the broadcast is received in fsfd_lock(). Instead use a timedwait.
  * Fix issue in os/file.c checking if a set of locks are a subset of another set
  
 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Wed Oct 01 2024 07:22:00 -0500
  
lstore (2.2.0) stable; urgency=low
  * Extend the notify routines to support logrotate
  * Fix issue with double closing a file on the LServer due to an mq_ongoing failure
  * Refactor the way mq_ongoing failures are handled by moving them to a separate
    threadpool instead of handling inline in the ongoing server thread which could
    lead to further ongoing failures.
  * Fix double lc_unlock() in myopen
  * Prefer using the OS from the args vs from the FD and also standardize on using
    osf_store_val() for handling failures
  * Fix memory leak from, typically, a broken symlink
  * Add extra open/close locking to prevent stale atts and add tracking for flaky RID/depot
  * Silence some messages about missing config files
  * Add flag, ignore_remove, to allow the data service to ignore allocation remove requests.
    This doesn't modify any grow/truncate behavior.  Just allocation removal. This was added
    to provide some reversability when merging namespaces with different options of storing
    small files as metadata.
  * Fix edge cases of symlinks being hardlinks
  * Update external tooling for handling orphaned shards and hardlinks
  * Extend lio_fsck support to handling files as metadata

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Wed Sep 09 2024 12:42:00 -0500

lstore (2.1.0) stable; urgency=low

  * Add the ability to dynamically rebalance data between the shards and also migrate data
    from the namespace drives to shards.
  * Normalize the destination directory to remove trailing '/'

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Wed Jul 17 2024 15:32:51 -0500

lstore (2.0.4) stable; urgency=low
  * Rework the way options are passed into the package builder
  * Move the MQ and OS remote_server extended debugging is enabled

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Fri Jul 12 2024 11:14:23 -0500

lstore (2.0.3) stable; urgency=medium
  * Fix memory leak in lio_os_path_split() when path has a trailing '/'
  * Fix memory leak in ostc_next_object() when there's an error in the namespace
  * Trap files with to many rows when repairing and throw an error
  
 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Fri Jul 12 2024 11:14:23 -0500

lstore (2.0.2) stable; urgency=low
  * Change to use the latest version of FUSE -- 3.16

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Fri Jul 12 2024 10:38:37 -0500

lstore (2.0.1) stable; urgency=low
  * Add changelog

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Fri Jul 12 2024 10:26:24 -0500

lstore (2.0.0) unstable; urgency=medium

  * Ability to bundle the latest libfuse3
  * User accounts added and path based ACLs
  * LFS Extended ACL support by mapping LStore credentials to local accounts
  * User R/W file locking across all processes attached to an LServer instance
  * Internal R/W file locking for tracking and synchronization between processes
  * Special file support -- FIFO and socket files. These don't cooredinate between LFS mounts and are just local
  * Ability to set file execute bit
  * Support for Rocky Linux 9
  * TCMUrunner support updated for using an LStore file as an iSCSI target
  * Extensive client and srver side logging to aid in troubleshooting with daily log rotation
  * More detailed state information related to open files and file system ops.
  * Low-level operations to track complex issues that can be enabled/disabled on the fly.
  * Updated log, mirror and cache segment drivers
  * Initial tooling for recovery log in case hard errors are encountered during writes - incomplete
  * LFS readdir processing moved to external thread for performance
  * Ability to have a local per file buffer to help get around small I/O for certain use cases.
  * Server side atomic create object routines
  * Properly characterizing long-running vs short tasks on the server to minimize threadpool blocking
  * Ability to dynamically rename an object -- file or directory -- and have it's open FD's and locks properly be tracked
  * Sharding of metadata directories in the LServer for increased IOPs performance
  * Added additional warming mode for large filesets. The new mode is a 2-phase process -- walking the FS and "baking".
      -  Walking can be a full normal walking of the FS or you can take an incrementatl from the last walk/inc
  * Server side tracking of open files and locks
  * Support for symlinks outside LFS
  * File system abstraction layer that mimics traditional POSIX calls, open, close, read, write, etc
  * Stdio wrapper for LD_PRELOAD applications
  * Tons of bug fixes and performance improvements
  * Small files can now be stored as metadata

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Tue, 30 Mar 2020 15:41:25 -0400

lstore (1.0.0) unstable; urgency=medium

  * Initial Release with ACL support

 -- Alan Tackett <alan.tackett@accre.vanderbilt.edu>  Tue, 30 Mar 2020 15:41:25 -0400

lstore (0.5.1) unstable; urgency=medium

  * Initial Release.

 -- Matthew Heller <matthew.f.heller@accre.vanderbilt.edu>  Tue, 26 Apr 2016 18:33:47 -0400
