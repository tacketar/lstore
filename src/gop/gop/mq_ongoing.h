/*
Copyright 2016 Vanderbilt University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** \file
* Autogenerated public API
*/

#ifndef ACCRE_GOP_MQ_ONGOING_H_INCLUDED
#define ACCRE_GOP_MQ_ONGOING_H_INCLUDED

#include <gop/visibility.h>
#include <gop/mq.h>
#include <gop/types.h>

#ifdef __cplusplus
extern "C" {
#endif

// Typedefs
typedef struct gop_mq_ongoing_host_t gop_mq_ongoing_host_t;
typedef struct gop_mq_ongoing_object_t gop_mq_ongoing_object_t;
typedef struct gop_mq_ongoing_t gop_mq_ongoing_t;
typedef struct gop_ongoing_hb_t gop_ongoing_hb_t;
typedef struct gop_ongoing_table_t gop_ongoing_table_t;
typedef gop_op_generic_t *(*gop_mq_ongoing_fail_fn_t)(void *arg, void *handle);

// Functions
GOP_API gop_mq_ongoing_object_t *gop_mq_ongoing_add(gop_mq_ongoing_t *mqon, bool auto_clean, char *id, int id_len, intptr_t key, void *handle, gop_mq_ongoing_fail_fn_t on_fail, void *on_fail_arg);
GOP_API gop_mq_ongoing_t *gop_mq_ongoing_create(gop_mq_context_t *mqc, gop_mq_portal_t *server_portal, int check_interval, int mode);
GOP_API void gop_mq_ongoing_destroy(gop_mq_ongoing_t *mqon);
GOP_API void *gop_mq_ongoing_get(gop_mq_ongoing_t *mqon, char *id, int id_len, intptr_t key);
GOP_API void gop_mq_ongoing_host_dec(gop_mq_ongoing_t *on, mq_msg_t *remote_host, char *id, int id_len);
GOP_API void gop_mq_ongoing_host_inc(gop_mq_ongoing_t *on, mq_msg_t *remote_host, char *id, int id_len, int heartbeat);
GOP_API void gop_mq_ongoing_release(gop_mq_ongoing_t *mqon, char *id, int id_len, intptr_t key);
GOP_API void *gop_mq_ongoing_remove(gop_mq_ongoing_t *mqon, char *id, int id_len, intptr_t key);

// Preprocessor constants

#define ONGOING_KEY            "ongoing"
#define ONGOING_SIZE           8
#define ONGOING_LOGOUT_KEY     "ongoing_logout"
#define ONGOING_LOGOUT_SIZE    15

#define ONGOING_SERVER 1
#define ONGOING_CLIENT 2

#define ONGOING_PTR2KEY(p) ((intptr_t)p)    //** Helper to convert a ptr to a key if the application chooses to

// Exported types. To be obscured
struct gop_mq_ongoing_object_t {
    int type;
    int count;
    bool auto_clean;
    void *handle;
    intptr_t key;
    gop_mq_ongoing_fail_fn_t on_fail;
    void *on_fail_arg;
};



#ifdef __cplusplus
}
#endif

#endif /* ^ ACCRE_GOP_MQ_ONGOING_H_INCLUDED ^ */ 
